client_max_body_size 2G;
client_body_buffer_size 500M;

proxy_pass_header Set-Cookie;
proxy_pass_header P3P;
proxy_pass_header X-Rundeck-Auth-Token;

fastcgi_buffers 1024 1024k;
fastcgi_buffer_size 1024k;
proxy_buffer_size   128k;
proxy_buffers   4 256k;
proxy_busy_buffers_size   256k;

proxy_connect_timeout 600s;
proxy_send_timeout 600s;
proxy_read_timeout 600s;
send_timeout 600s;
fastcgi_read_timeout 600s;

# proxy_set_header Host $host;

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
resolver 172.20.0.10;
#resolver kube-dns.kube-system.svc.cluster.local valid=10s;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";


# Added for static Scan
server_tokens off;
more_set_headers 'Server: Turing-server';
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";
# add_header Content-Security-Policy "default-src 'self'; worker-src 'self' blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' data: https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src require-sri-for 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com https://fonts.gstatic.com; font-src require-sri-for 'self' data: https://fonts.gstatic.com https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";


server {
  resolver 172.20.0.10;
  #resolver kube-dns.kube-system.svc.cluster.local valid=10s;
  listen 8080;
  listen 8443 ssl http2 ;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS';
  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;
  ssl_certificate /etc/nginx/certs/atr.crt;
  ssl_certificate_key /etc/nginx/certs/atr.key;
  
  proxy_connect_timeout 600s;
  proxy_send_timeout 600s;
  proxy_read_timeout 600s;
  send_timeout 600s;
  fastcgi_read_timeout 600s;

  server_tokens off;
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";
  # add_header Content-Security-Policy "default-src 'self'; worker-src 'self' blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' data: https://ssl.google-analytics.com https://maxcdn.bootstrapcdn.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://maxcdn.bootstrapcdn.com https://fonts.googleapis.com https://assets.zendesk.com https://fonts.gstatic.com; font-src 'self' data: https://fonts.gstatic.com https://maxcdn.bootstrapcdn.com https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

  add_header X-Frame-Options "SAMEORIGIN";

  proxy_intercept_errors on;
  #more_clear_headers Server;


#   error_page 404 444 500 403 502 503 504 /404.html;

  error_page 403 /403.html;
  location /403.html{
    root /var/www/html;
  }

  error_page 404 444 /404.html;
  location /404.html{
    root /var/www/html;
  }

  error_page 405 /405.html;
  location /405.html{
    root /var/www/html;
  }

  error_page 500 502 503 504 /500.html;
  location /500.html{
    root /var/www/html;
  }


  set $UD "";
  if ($request_method !~ ^(GET|HEAD|POST)$ ){
    set $UD T;
  }
  if ($http_authorization = ""){
    set $UD "${UD}G";
  }
  if ($http_apitoken = ""){
    set $UD "${UD}Q";
  }
  if ($http_host = "dev-turing.mywizard-aiops.com"){
    set $UD "";
  }
  if ($UD = TGQ){
    return 444;
  }

  #location = /404.html {
  #  root /var/www/error/;
  #  internal;
  #}

  # Referral Validation
  valid_referers none blocked server_names
               *.mywizard-aiops.com *.atrmywizard-aiops.com localhost;

  if ($invalid_referer) {
      return 403;
  }

  location ~* \.(wim|war|lzma|ear|ar)$ {
    return 404;
  }

  location / {
    set $upstream http://readify-frontend:80;
    proxy_pass $upstream;
  }

  location /readify {
    set $upstream http://readify-frontend:80;
    proxy_pass $upstream;
  }
  
  location /labeltool/ {
    set $upstream http://cognitive-services-labeltool:8080;
    rewrite ^/labeltool(.*)$ $1 break;
    proxy_pass $upstream;
  }

   location /labeltool {
    set $upstream http://cognitive-services-labeltool:8080;
    proxy_pass $upstream;
  }

  location /api/v2 {                                   
      set $upstream http://genai-backend:8080;                
      proxy_pass $upstream;                       
  }

  location /api {
    set $upstream http://readify-backend:8080;
    proxy_pass $upstream;
  }

  location /document-config {
    set $upstream http://readify-document-config:8080;
    proxy_pass $upstream;
  }
  location /document-config-client {
    # rewrite /^/document-config-client/(.*)$ $1 break;
    set $upstream http://readify-document-config-client:8080;
    proxy_pass $upstream;
  }

  location /data-management {
    set $upstream http://readify-data-management:8080;
    proxy_pass $upstream;
  }
  location /data-management-client {
    # rewrite /^/data-management-client/(.*)$ $1 break;
    set $upstream http://readify-data-management-client:8080;
    proxy_pass $upstream;
  }

  location /lexicon {
    set $upstream http://turing-lexicon:8080;
    proxy_pass $upstream;
  }

  location /lexicon-client {
    # rewrite /^/lexicon-client/(.*)$ $1 break;
    set $upstream http://turing-lexicon-client:8080;
    proxy_pass $upstream;
  }

  location /mturk {
    set $upstream http://readify-mturk:8080;
    proxy_pass $upstream;
  }
  location /mturk-client {
    # rewrite /^/mturk-client/(.*)$ $1 break;
    set $upstream http://readify-mturk-client:8080;
    proxy_pass $upstream;
  }
  location /notification {
    set $upstream http://turing-notification:8080;
    proxy_pass $upstream;
  }
  location /notifications_socket {
    set $upstream http://turing-notification:8080;
    proxy_pass $upstream;
  }

  location /app/kibana/ {
    set $upstream http://turing-kibana:6007;
    rewrite ^/app/kibana(.*)$ $1 break;
    proxy_pass $upstream;
  }

  location /app/kibana {
    set $upstream http://turing-kibana:6007;
    proxy_pass $upstream;
  }

  location /elasticsearch/ {
    set $upstream http://es01:9200;
    rewrite ^/elasticsearch(.*)$ $1 break;
    proxy_pass $upstream;
  }

  location /elasticsearch {
    set $upstream http://es01:9200;
    proxy_pass $upstream;
  }

  location /atr-gateway {
    set $upstream http://gateway:8080;
    proxy_pass $upstream;
  }

  location /identity-management {
    set $upstream http://identity-management-client:8080;
    proxy_pass $upstream;
  }

  location /ingrain-core {
    set $upstream http://mlcore-client:8080;
    proxy_pass $upstream;
  }

  location /core {
    set $upstream http://mlcore-client:8080;
    proxy_pass $upstream;
  }

  location /ingrain-master {
    set $upstream http://mlcore-master:8041;
    rewrite ^/ingrain-master(.*)$ $1 break;
    proxy_pass $upstream;
  }

  location /fonts {
    set $upstream http://readify-frontend:80;
    proxy_pass $upstream;
  }
}
